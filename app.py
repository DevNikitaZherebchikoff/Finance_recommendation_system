import streamlit as st
import pandas as pd
import pickle
from catboost import CatBoostClassifier

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@st.cache_resource
def load_model():
    return CatBoostClassifier().load_model("model/catboost_model_ROC8.cbm")

@st.cache_data
def load_products():
    return pd.read_csv("data/products.csv")

model = load_model()
products = load_products()

st.title("üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")

st.header("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

age = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 18, 80, 30)
income = st.number_input("–î–æ—Ö–æ–¥", min_value=10000, max_value=500000, value=80000, step=5000)
has_mortgage = st.selectbox("–ï—Å—Ç—å –∏–ø–æ—Ç–µ–∫–∞?", ["–ù–µ—Ç", "–î–∞"])
goal = st.selectbox("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å", ["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ", "–ø–µ–Ω—Å–∏—è", "–ø–æ–∫—É–ø–∫–∞ –∂–∏–ª—å—è"])

# –û–±—Ä–∞–±–æ—Ç–∫–∞
from catboost import Pool

if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
    user_data = pd.DataFrame([{
        "age": age,
        "income": income,
        "has_mortgage": 1 if has_mortgage == "–î–∞" else 0,
        "goal_x": goal
    }])

    df = user_data.assign(key=1).merge(products.assign(key=1), on="key").drop("key", axis=1)
    df.rename(columns={"goal": "goal_y"}, inplace=True)

    # –¢–µ –∂–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    X = df[["age", "income", "has_mortgage", "min_income", "risk_score", "goal_x", "goal_y", "type"]]

    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Pool
    cat_features = ["goal_x", "goal_y", "type"]
    pool = Pool(data=X, cat_features=cat_features)

    df["score"] = model.predict_proba(pool)[:, 1]

    recommendations = df[["type", "goal_y", "risk_score", "score"]].sort_values("score", ascending=False).head(5)

    st.subheader("üîÆ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:")
    st.dataframe(recommendations.reset_index(drop=True))

